// Generated by gencpp from file daimler_tugger/DaimlerServiceCallResponse.msg
// DO NOT EDIT!


#ifndef DAIMLER_TUGGER_MESSAGE_DAIMLERSERVICECALLRESPONSE_H
#define DAIMLER_TUGGER_MESSAGE_DAIMLERSERVICECALLRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace daimler_tugger
{
template <class ContainerAllocator>
struct DaimlerServiceCallResponse_
{
  typedef DaimlerServiceCallResponse_<ContainerAllocator> Type;

  DaimlerServiceCallResponse_()
    : Result(false)  {
    }
  DaimlerServiceCallResponse_(const ContainerAllocator& _alloc)
    : Result(false)  {
  (void)_alloc;
    }



   typedef uint8_t _Result_type;
  _Result_type Result;





  typedef boost::shared_ptr< ::daimler_tugger::DaimlerServiceCallResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::daimler_tugger::DaimlerServiceCallResponse_<ContainerAllocator> const> ConstPtr;

}; // struct DaimlerServiceCallResponse_

typedef ::daimler_tugger::DaimlerServiceCallResponse_<std::allocator<void> > DaimlerServiceCallResponse;

typedef boost::shared_ptr< ::daimler_tugger::DaimlerServiceCallResponse > DaimlerServiceCallResponsePtr;
typedef boost::shared_ptr< ::daimler_tugger::DaimlerServiceCallResponse const> DaimlerServiceCallResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::daimler_tugger::DaimlerServiceCallResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::daimler_tugger::DaimlerServiceCallResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::daimler_tugger::DaimlerServiceCallResponse_<ContainerAllocator1> & lhs, const ::daimler_tugger::DaimlerServiceCallResponse_<ContainerAllocator2> & rhs)
{
  return lhs.Result == rhs.Result;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::daimler_tugger::DaimlerServiceCallResponse_<ContainerAllocator1> & lhs, const ::daimler_tugger::DaimlerServiceCallResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace daimler_tugger

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::daimler_tugger::DaimlerServiceCallResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::daimler_tugger::DaimlerServiceCallResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::daimler_tugger::DaimlerServiceCallResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::daimler_tugger::DaimlerServiceCallResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::daimler_tugger::DaimlerServiceCallResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::daimler_tugger::DaimlerServiceCallResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::daimler_tugger::DaimlerServiceCallResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "85ed39ee8c4e8f1c21743e6fe4dd523e";
  }

  static const char* value(const ::daimler_tugger::DaimlerServiceCallResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x85ed39ee8c4e8f1cULL;
  static const uint64_t static_value2 = 0x21743e6fe4dd523eULL;
};

template<class ContainerAllocator>
struct DataType< ::daimler_tugger::DaimlerServiceCallResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "daimler_tugger/DaimlerServiceCallResponse";
  }

  static const char* value(const ::daimler_tugger::DaimlerServiceCallResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::daimler_tugger::DaimlerServiceCallResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool Result\n"
;
  }

  static const char* value(const ::daimler_tugger::DaimlerServiceCallResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::daimler_tugger::DaimlerServiceCallResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DaimlerServiceCallResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::daimler_tugger::DaimlerServiceCallResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::daimler_tugger::DaimlerServiceCallResponse_<ContainerAllocator>& v)
  {
    s << indent << "Result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DAIMLER_TUGGER_MESSAGE_DAIMLERSERVICECALLRESPONSE_H
